devtools::load_all(".")
devtools::use_build_ignore("data")
usethis::use_build_ignore("data")
library(RACplots)
library(RACplots)
knitr::opts_chunk$set(cache=TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align = "center")
library(RACplots)
library(optmatch)
library(DOS2)
library(tidyverse)
library(ggpubr)
theme_set(theme_light())
#Calculate best possible propensity and prognostic scores without knowing about confounder
naive_df <- df %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = X1/3-3)
nu <- 0.3
rho <- 0.2
#simulate data
df <- generate_xSITA_data(N = 2000, p = 10, nu = nu, rho = rho, sigma = 1)
# mahalanobis match
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = df)
knitr::opts_chunk$set(cache=TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align = "center")
library(RACplots)
library(optmatch)
library(DOS2)
library(tidyverse)
library(ggpubr)
theme_set(theme_light())
# set some universal variables
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
k = 1
nu <- 0.3
rho <- 0.2
#simulate data
df <- generate_xSITA_data(N = 2000, p = 10, nu = nu, rho = rho, sigma = 1)
# mahalanobis match
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = df)
m_match <- pairmatch(mahal_dist, controls = k, df)
#Calculate best possible propensity and prognostic scores without knowing about confounder
naive_df <- df %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = X1/3-3)
naive_prop_match <- pairmatch(t ~ prop, controls = k, naive_df)
mahal_caliper_dist <- addcaliper(mahal_dist, z = naive_df$t, p = naive_df$prop, caliper = 0.1)
mahal_caliper_dist <- addcaliper(mahal_caliper_dist, z = naive_df$t, p = naive_df$prog, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, naive_df)
a <- AC_match_plot(naive_df, m_match, title = "Mahalanobis Match")
b <- AC_match_plot(naive_df, oracle_prop_match, title = "Propensity Match")
a <- AC_match_plot(naive_df, m_match, title = "Mahalanobis Match")
b <- AC_match_plot(naive_df, naive_prop_match, title = "Propensity Match")
c <- AC_match_plot(naive_df, m_caliper_match, title = "Mahalanobis Match, Joint Calipers")
d <- AC_match_plot(df, m_match, title = "Mahalanobis Match")
e <- AC_match_plot(df, naive_prop_match, title = "Propensity Match")
f <- AC_match_plot(df, m_caliper_match, title = "Mahalanobis Match, Joint Calipers")
ggarrange(a,b,c,d, e, f,  ncol= 3, nrow = 2, labels = "AUTO" )
pdf("figures/Figure4.pdf",  width=8, height=6)
ggarrange(a,b,c,d, e, f,  ncol= 3, nrow = 2, labels = "AUTO" )
dev.off()
devtools::load_all(".")
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, 0.9)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal, rho, shaded_class = 0)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, 0.9)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal, rho, shaded_class = "none")
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, 0.9)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, 0.9)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal)
b <- AC_plot(data = df_prop_overlap_bad)
c <- AC_plot(data = df_prog_overlap_bad)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
nf_match <- reformat_nf(nf, 1000)
devtools::load_all(".")
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,c(1,2, 4:10)])
m_match <- pairmatch(mahal_dist, controls = 1, df)
mahal_caliper_dist <- addcaliper(mahal_dist, z = df$t, p = df$prop, caliper = 0.1)
mahal_caliper_dist <- addcaliper(mahal_caliper_dist, z = df$t, p = df$prog, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, df)
a <- AC_match_plot(data = df, match = m_caliper_match)
b <- RC_match_plot(data = df, match = m_caliper_match)
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal)
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal)
devtools::load_all(".")
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal)
b <- AC_plot(data = df_prop_overlap_bad)
c <- AC_plot(data = df_prog_overlap_bad)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
devtools::load_all(".")
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal)
b <- AC_plot(data = df_prop_overlap_bad)
c <- AC_plot(data = df_prog_overlap_bad)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
a <- AC_plot(data = df_normal, shaded_class = 0)
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal, opaque_class = 0)
b <- AC_plot(data = df_prop_overlap_bad)
c <- AC_plot(data = df_prog_overlap_bad)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal, opaque_class = "none")
b <- AC_plot(data = df_prop_overlap_bad)
c <- AC_plot(data = df_prog_overlap_bad)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal)
b <- AC_plot(data = df_prop_overlap_bad)
c <- AC_plot(data = df_prog_overlap_bad)
d <- propensity_histogram(data = df_normal)
e <- propensity_histogram(data = df_prop_overlap_bad)
f <- propensity_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
devtools::load_all(".")
devtools::load_all(".")
reformat_nf <- function(nf, N){
m_nf <- dim(nf$match[1])
nf_reformatted <- nf$match %>%
as_tibble() %>%
mutate(match_id = paste("1.", 1:nrow(.), sep = "")) %>%
gather("name", "index", -match_id)
match <- tibble(index = 1:N) %>%
left_join(nf_reformatted) %>%
pull(match_id)
names(match) <- 1:N
return(match)
}
set.seed(125)
df <- generate_data(N = 1000, p = 10, true_mu = "X1/2 + X3/2 - 3", rho = rho) %>%
mutate(IV = X3/2,
prop = X1/2 - 3,
prog = rho * X1 + sqrt(1-rho^2) * X2)
library(nearfar)
set.seed(123)
IVrange <- range(df$X3)[2] - range(df$X3)[1]
nf <- opt_nearfar(dta = df, trt = "t", covs = c("X1", "X2"), iv = "X3",
trt.type = "bin", adjust.IV = TRUE, cutp.range = c(sd(df$X3)*1.5, IVrange),
max.time.seconds = 600)
devtools::load_all("~/Documents/Research/RACplots")
nf_match <- reformat_nf(nf, 1000)
m <- sum(is.na(nf_match))/2
subsample_mids <- paste("1.", sample(1:m, 30), sep = "")
nf_match_subsample <- ifelse(nf_match %in% subsample_mids, nf_match, NA)
a <- AC_filter_plot(data = df, match = nf_match)
b <- RC_filter_plot(data = df, match = nf_match)
c <- RA_filter_plot(data = df, match = nf_match)
d <- AC_match_plot(data = df, match = nf_match_subsample)
e <- RC_match_plot(data = df, match = nf_match_subsample)
f <- RA_match_plot(data = df, match = nf_match_subsample)
ggarrange(a, b, c, d, e, f, ncol = 3, nrow =2, labels = "AUTO")
devtools::load_all(".")
nf_match <- reformat_nf(nf, 1000)
m <- sum(is.na(nf_match))/2
subsample_mids <- paste("1.", sample(1:m, 30), sep = "")
nf_match_subsample <- ifelse(nf_match %in% subsample_mids, nf_match, NA)
a <- AC_filter_plot(data = df, match = nf_match)
b <- RC_filter_plot(data = df, match = nf_match)
c <- RA_filter_plot(data = df, match = nf_match)
d <- AC_match_plot(data = df, match = nf_match_subsample)
e <- RC_match_plot(data = df, match = nf_match_subsample)
f <- RA_match_plot(data = df, match = nf_match_subsample)
ggarrange(a, b, c, d, e, f, ncol = 3, nrow =2, labels = "AUTO")
knitr::opts_chunk$set(cache=TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align = "center", cache.lazy = F)
library(RACplots)
library(optmatch)
library(DOS2)
library(tidyverse)
library(ggpubr)
library(mice)
library(stratamatch)
library(knitr)
theme_set(theme_light())
# Read in CABG df and dataDict
cabg_raw <- read_csv("../data/cabg_cohort_rocky_12_01_2020.csv")
cabg_dataDict <- read_csv("../data/cabg_cohort_rocky_dataDict_12_02_2020.csv")
# All Beneficiary IDs are distinct, so replacing BENE_ID with new ID column
cabg_df <- cabg_raw %>%
select(- BENE_ID) %>%
mutate(BENE_ID = 1:dim(.)[1]) %>%
rename(PROVIDER_GENDER = `Provider Gender Code`) %>%
filter(!is.na(surgdate), !is.na(PROVIDER_GENDER), BENE_SEX_CD != 0)
# taking a look at what comorbidity information is present enough to keep
completeness <- summarize_all(cabg_df, function(x) mean(!is.na(x))) %>% slice(1) %>% as.numeric()
variance <- summarize_all(cabg_df, function(x) var(x, na.rm = T)) %>% slice(1) %>% as.numeric()
colstats <- tibble(value = colnames(cabg_df), completeness = completeness, variance = variance)
#colstats %>%
#  filter(completeness > 0.8,
#         !endsWith(value, "bfdschrg"),
#         !endsWith(value, "EVER_IND"),
#         !endsWith(value, "YEAREND_IND"))
set.seed(123)
# Since most admissions are 123 (Emergency, Urgent, or Elective),
# I recode admission codes 0456789 to 0 = "Other"
cabg_cleaned <- cabg_df %>%
select(BENE_ID, BENE_MDCR_STUS_CD, BENE_RSDNC_SSA_STATE_CD,
BENE_RACE_CD, BENE_SEX_CD, BENE_AGE_CNT, ADMSN_DAY_CD,
IP_ADMSN_TYPE_CD, BENE_DEATH_DT,
cabg_only, cabg_primary, surgdate, indexSurgyear, hosp_vol_99_10,
hosp_mvol_99_10, prior_cabg, PROVIDER_GENDER,
ISCHEMICHEART_EVER_bfadmin, HYPERL_EVER_bfadmin, HYPERT_EVER_bfadmin) %>%
mutate(MORT_30_DAY = ifelse(is.na(BENE_DEATH_DT), FALSE,
BENE_DEATH_DT < surgdate + 30),
PROVIDER_GENDER = ifelse(PROVIDER_GENDER == "M", 1, 2),
SEX_GENDER_MATCH = PROVIDER_GENDER == BENE_SEX_CD,
BENE_MALE = BENE_SEX_CD == 1) %>% # recode SEX to binary. 1,2 coding sometimes causes bugs
mutate(IP_ADMSN_TYPE_CD = ifelse(IP_ADMSN_TYPE_CD == 0 | IP_ADMSN_TYPE_CD > 3,
0, IP_ADMSN_TYPE_CD)) %>%
select(-c(BENE_DEATH_DT, PROVIDER_GENDER, surgdate, BENE_SEX_CD)) %>%
mutate_at(c("BENE_MDCR_STUS_CD", "BENE_RSDNC_SSA_STATE_CD",
"BENE_RACE_CD", "ADMSN_DAY_CD", "IP_ADMSN_TYPE_CD"),
as.factor)
set.seed(123)
split.full <- split_pilot_set(cabg_cleaned, treat = "SEX_GENDER_MATCH",
pilot_fraction = 0.1,
group_by_covariates = c("BENE_RSDNC_SSA_STATE_CD", "BENE_MALE"))
prog_model <- glm(MORT_30_DAY ~ BENE_MALE + BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + hosp_vol_99_10 +
hosp_mvol_99_10 + prior_cabg,
family = binomial(), data = split.full$pilot_set)
summary(prog_model)
prog_scores <- predict(prog_model, newdata = split.full$analysis_set)
prop_model <- glm(SEX_GENDER_MATCH ~ BENE_MALE + BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + ADMSN_DAY_CD + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + hosp_vol_99_10 +
hosp_mvol_99_10 + prior_cabg ,
family = binomial(), data = cabg_cleaned)
summary(prop_model)
prop_scores <- predict(prop_model, newdata = split.full$analysis_set)
set.seed(124)
a_set.full <- split.full$analysis_set %>%
mutate(prop = prop_scores,
prog = prog_scores,
t = SEX_GENDER_MATCH ) %>%
sample_n(size = 400)
AC_plot(a_set.full, shaded_class = "none")
set.seed(124)
a_set.full <- split.full$analysis_set %>%
mutate(prop = prop_scores,
prog = prog_scores,
t = SEX_GENDER_MATCH ) %>%
sample_n(size = 400)
AC_plot(a_set.full, opaque_class = "none")
cabg_cleaned %>% group_by(BENE_MALE,SEX_GENDER_MATCH) %>%
summarise(n()) %>% kable()
cabg_cleaned %>% group_by(BENE_MALE) %>% summarize(`Percent Treated` = mean(SEX_GENDER_MATCH)) %>%
kable()
a.m <- split.full$analysis_set %>% filter(BENE_MALE == 1)
p.m <- split.full$pilot_set %>% filter(BENE_MALE == 1)
full.m <- cabg_cleaned %>% filter(BENE_MALE == 1)
prog_model.m <- glm(MORT_30_DAY ~ BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + hosp_vol_99_10 +
hosp_mvol_99_10 + prior_cabg,
family = binomial(), data = p.m)
summary(prog_model.m)
prog_scores.m <- predict(prog_model.m, newdata = a.m)
prop_model.m <- glm(SEX_GENDER_MATCH ~ BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + ADMSN_DAY_CD + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + hosp_vol_99_10 +
hosp_mvol_99_10 + prior_cabg,
family = binomial(), data = full.m)
summary(prop_model.m)
prop_scores.m <- predict(prop_model.m, newdata = a.m)
# builds lasso prognostic score model
# just fixes everything at zero.
x_p.m <- model.matrix(MORT_30_DAY ~ BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + prior_cabg, p.m)
x_a.m <- model.matrix(MORT_30_DAY ~ BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + prior_cabg, a.m)
y_p.m <- p.m %>%
select(MORT_30_DAY) %>%
as.matrix()
cvprog <- cv.glmnet(x_p.m, y_p.m, family = "binomial")
library(glmnet)
# builds lasso prognostic score model
# just fixes everything at zero.
x_p.m <- model.matrix(MORT_30_DAY ~ BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + prior_cabg, p.m)
x_a.m <- model.matrix(MORT_30_DAY ~ BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + prior_cabg, a.m)
y_p.m <- p.m %>%
select(MORT_30_DAY) %>%
as.matrix()
cvprog <- cv.glmnet(x_p.m, y_p.m, family = "binomial")
prog_scores.m <- predict(cvprog, newx = x_a.m, s = "lambda.min")
a_set.m <- a.m %>%
mutate(prop = prop_scores.m,
prog = prog_scores.m,
t = SEX_GENDER_MATCH ) %>%
sample_n(size = 2000)
AC_plot(a_set.m, shaded_class = 0)
a_set.m <- a.m %>%
mutate(prop = prop_scores.m,
prog = prog_scores.m,
t = SEX_GENDER_MATCH ) %>%
sample_n(size = 2000)
AC_plot(a_set.m, opaque_class = 0)
p.m %>% group_by(MORT_30_DAY) %>% summarize(n()) %>% kable()
a.f <- split.full$analysis_set %>% filter(BENE_MALE == 0)
p.f <- split.full$pilot_set %>% filter(BENE_MALE == 0)
full.f <- cabg_cleaned %>% filter(BENE_MALE == 0)
prog_model.f <- glm(MORT_30_DAY ~ BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + hosp_vol_99_10 +
hosp_mvol_99_10 + prior_cabg,
family = binomial(), data = p.f)
summary(prog_model.f)
prog_scores.f <- predict(prog_model.f, newdata = a.f)
prop_model.f <- glm(SEX_GENDER_MATCH ~ BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + ADMSN_DAY_CD + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + hosp_vol_99_10 +
hosp_mvol_99_10 + prior_cabg,
family = binomial(), data = full.f)
summary(prop_model.f)
prop_scores.f <- predict(prop_model.f, newdata = a.f)
a_set.f <- a.f %>%
mutate(prop = prop_scores.f,
prog = prog_scores.f,
t = SEX_GENDER_MATCH ) %>%
sample_n(size = 2000)
AC_plot(a_set.f)
p.f %>% group_by(MORT_30_DAY) %>% summarize(n()) %>% kable()
knitr::opts_chunk$set(cache=TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align = "center", cache.lazy = F)
library(RACplots)
library(optmatch)
library(DOS2)
library(tidyverse)
library(ggpubr)
library(mice)
library(stratamatch)
library(knitr)
library(ggplotify)
theme_set(theme_light())
# Read in CABG df and dataDict
cabg_raw <- read_csv("../data/cabg_cohort_rocky_12_01_2020.csv") %>% filter(BENE_SEX_CD == 2)
cabg_dataDict <- read_csv("../data/cabg_cohort_rocky_dataDict_12_02_2020.csv")
knitr::opts_chunk$set(echo = TRUE)
P <- matrix(c(0.95, 0.05, 0, 0, 0, 0,
0, 0.9, 0.1, 0, 0, 0,
0, 0, 0.875, 0.125, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0 ,1,
1, 0, 0, 0, 0, 0))
p
P
P <- matrix(c(0.95, 0.05, 0, 0, 0, 0,
0, 0.9, 0.1, 0, 0, 0,
0, 0, 0.875, 0.125, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0 ,1,
1, 0, 0, 0, 0, 0), nrow = 6, ncol = 6)
P
P <- matrix(c(0.95, 0.05, 0, 0, 0, 0,
0, 0.9, 0.1, 0, 0, 0,
0, 0, 0.875, 0.125, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0 ,1,
1, 0, 0, 0, 0, 0), nrow = 6, ncol = 6, byrow = T)
P
P <- matrix(c(0.95, 0.05, 0, 0, 0, 0,
0, 0.9, 0.1, 0, 0, 0,
0, 0, 0.875, 0.125, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0 ,1,
1, 0, 0, 0, 0, 0), nrow = 6, ncol = 6, byrow = T)
y <- P
for(i in 1:25){
y <- y %*% P
}
y
P <- matrix(c(0.95, 0.05, 0, 0, 0, 0,
0, 0.9, 0.1, 0, 0, 0,
0, 0, 0.875, 0.125, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0 ,1,
1, 0, 0, 0, 0, 0), nrow = 6, ncol = 6, byrow = T)
y <- P
for(i in 1:50){
y <- y %*% P
}
y
P <- matrix(c(0.95, 0.05, 0, 0, 0, 0,
0, 0.9, 0.1, 0, 0, 0,
0, 0, 0.875, 0.125, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0 ,1,
1, 0, 0, 0, 0, 0), nrow = 6, ncol = 6, byrow = T)
y <- P
for(i in 1:100){
y <- y %*% P
}
y
P <- matrix(c(0.95, 0.05, 0, 0, 0, 0,
0, 0.9, 0.1, 0, 0, 0,
0, 0, 0.875, 0.125, 0, 0,
0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0 ,1,
1, 0, 0, 0, 0, 0), nrow = 6, ncol = 6, byrow = T)
y <- P
for(i in 1:200){
y <- y %*% P
}
y
sum([1, 1:3])
sum(y[1, 1:3])
P <- matrix(c(0.95, 0.05, 0,
0, 0.9, 0.1,
1, 0, 0), nrow = 3, ncol = 3, byrow = T)
y <- P
for(i in 1:200){
y <- y %*% P
}
y
sum(y[1, 1:2])
