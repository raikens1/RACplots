b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggarrange)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
caliper_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(prog_model, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = not_selected)
mahal_caliper_dist <- addcaliper(mahal_dist, z = not_selected$t, p = not_selected$propscore, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, not_selected)
return(list(df = not_selected, match = m_caliper_match, k = n_control))
}
# Build scores empirically for propensity and prognostic match
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
# Build scores empirically for propensity and prognostic match
prop_model = formula(t ~ . - mu - y)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
df
# Build scores empirically for propensity and prognostic match
prop_model = formula(t ~ . - y - mu)
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
caliper_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(prog_model, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = not_selected)
mahal_caliper_dist <- addcaliper(mahal_dist, z = not_selected$t, p = not_selected$propscore, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, not_selected)
return(list(df = not_selected, match = m_caliper_match, k = n_control))
}
# Build scores empirically for propensity and prognostic match
prop_model = formula(t ~ . - y - mu)
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# Build scores empirically for propensity and prognostic match
prop_model = formula(t ~ . - y - mu)
k <- 1
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ . - mu - y)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match_assignment <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match_assignment <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
library(DOS2)
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match_assignment <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
match_viz <- function(data, match, rho, k = 1, title = "Matching"){
plt_data <- data %>%
mutate(m = match) %>%
mutate(a = ifelse (is.na(m), 0.9, 1)) %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop, m, a))
m_data <- plt_data %>%
filter(!is.na(m)) %>%
arrange(m, desc(t)) %>%
mutate(id = rep(1:(k + 1), sum(data$t))) %>%
dplyr::select(-c(t, a)) %>%
group_by(m) %>%
summarize(prop1 = first(prop), prop2 = last(prop),
prog1 = first(prog), prog2 = last(prog)) %>%
dplyr::select(prog1, prog2, prop1, prop2)
plt <- ggplot(data = plt_data, aes( x = prop, y = prog, group = t, color = t)) +
geom_point(aes(alpha = a), size = 1)+
scale_color_brewer(palette="Set1") +
geom_segment(data = m_data,
aes(x = prop1, y = prog1,
xend = prop2, yend = prog2),
color =  "black", group = NA, linetype = "dashed") +
ggtitle( title)+
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9))+
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab(expression(paste("Propensity, ", phi, "(x)", sep = "")))
return(plt)
}
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, prop_match, rho, title = "Estimated Propensity Match")
c <- match_viz(buff_match_assignment$df, buff_match_assignment$match, rho, title = "Estimated Propensity x Prognosis Match")
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
library(DOS2)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
library(DOS2)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
library(DOS2)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
caliper_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(prog_model, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = not_selected)
mahal_caliper_dist <- addcaliper(mahal_dist, z = not_selected$t, p = not_selected$propscore, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, not_selected)
return(list(df = not_selected, match = m_caliper_match, k = n_control))
}
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
match_viz <- function(data, match, rho, k = 1, title = "Matching"){
plt_data <- data %>%
mutate(m = match) %>%
mutate(a = ifelse (is.na(m), 0.9, 1)) %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop, m, a))
m_data <- plt_data %>%
filter(!is.na(m)) %>%
arrange(m, desc(t)) %>%
mutate(id = rep(1:(k + 1), sum(data$t))) %>%
dplyr::select(-c(t, a)) %>%
group_by(m) %>%
summarize(prop1 = first(prop), prop2 = last(prop),
prog1 = first(prog), prog2 = last(prog)) %>%
dplyr::select(prog1, prog2, prop1, prop2)
plt <- ggplot(data = plt_data, aes( x = prop, y = prog, group = t, color = t)) +
geom_point(aes(alpha = a), size = 1)+
scale_color_brewer(palette="Set1") +
geom_segment(data = m_data,
aes(x = prop1, y = prog1,
xend = prop2, yend = prog2),
color =  "black", group = NA, linetype = "dashed") +
ggtitle( title)+
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9))+
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab(expression(paste("Propensity, ", phi, "(x)", sep = "")))
return(plt)
}
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, prop_match, rho, title = "Estimated Propensity Match")
c <- match_viz(caliper_match$df, caliper_match$match, rho, title = "Estimated Propensity x Prognosis Match")
ggarrange(a,b,c, ncol= 3, labels = "AUTO" )
devtools::load_all(".")
knitr::opts_chunk$set(cache=TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align = "center")
library(RACplots)
library(optmatch)
library(DOS2)
library(tidyverse)
library(ggpubr)
theme_set(theme_light())
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
rho <- 0.3
#simulate data
df_normal <- generate_data(N = 1500, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1500, p = 10, true_mu = "3*X1-6", rho = 0.9, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, 0.9)
d <- overlap_histogram(data = df_normal)
e <- overlap_histogram(data = df_prop_overlap_bad)
f <- overlap_histogram(data = df_prog_overlap_bad)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
pdf("figures/Figure1.pdf",  width=8, height=5)
ggarrange(a, b, c, d, e, f, ncol= 3, nrow = 2, heights = c(3, 2), labels = "AUTO")
dev.off()
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# Match on the true scores
oracle_prop_match <- pairmatch(t ~ prop, controls = k, df)
# mahalanobis match + caliper
mahal_caliper_dist <- addcaliper(mahal_dist, z = df$t, p = df$prop, caliper = 0.1)
mahal_jointcaliper_dist <- addcaliper(mahal_caliper_dist, z = df$t, p = df$prog, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, df)
m_jointcaliper_match <- pairmatch(mahal_jointcaliper_dist, controls = k, df)
a <- AC_match_plot(df, m_match, title = "\nMahalanobis Match")
b <- AC_match_plot(df, oracle_prop_match, title = "\nPropensity Match")
c <- AC_match_plot(df, m_caliper_match, title = "Mahalanobis Match,\nPropensity Caliper")
d <- AC_match_plot(df, m_jointcaliper_match, title = "Mahalanobis Match,\nJoint Caliper")
ggarrange(a, b, c, d, ncol= 2, nrow = 2, labels = "AUTO" )
pdf("figures/Figure2.pdf",  width=6, height=6)
ggarrange(a, b, c, d, ncol= 2, nrow = 2, labels = "AUTO" )
dev.off()
rho <- 0.5
df <- generate_data(N = 2000, p = 10, true_mu = "X1/2 + X3/2 - 3.25", rho = rho) %>%
mutate(IV = X3/2,
prop = X1/2 - 3.25) # separate mu into IV and prop
reformat_nf <- function(nf, N){
m_nf <- dim(nf$match[1])
nf_reformatted <- nf$match %>%
as_tibble() %>%
mutate(match_id = paste("1.", 1:nrow(.), sep = "")) %>%
gather("name", "index", -match_id)
match <- tibble(index = 1:N) %>%
left_join(nf_reformatted) %>%
pull(match_id)
names(match) <- 1:N
return(match)
}
set.seed(125)
df <- generate_data(N = 1000, p = 10, true_mu = "X1/2 + X3/2 - 3", rho = rho) %>%
mutate(IV = X3/2,
prop = X1/2 - 3,
prog = rho * X1 + sqrt(1-rho^2) * X2)
library(nearfar)
set.seed(123)
IVrange <- range(df$X3)[2] - range(df$X3)[1]
nf <- opt_nearfar(dta = df, trt = "t", covs = c("X1", "X2"), iv = "X3",
trt.type = "bin", adjust.IV = TRUE, cutp.range = c(sd(df$X3)*1.5, IVrange),
max.time.seconds = 600)
nf_match <- reformat_nf(nf, 1000)
m <- sum(is.na(nf_match))/2
subsample_mids <- paste("1.", sample(1:m, 30), sep = "")
nf_match_subsample <- ifelse(nf_match %in% subsample_mids, nf_match, NA)
a <- AC_filter_plot(data = df, match = nf_match)
b <- RC_filter_plot(data = df, match = nf_match)
c <- RA_filter_plot(data = df, match = nf_match)
d <- AC_match_plot(data = df, match = nf_match_subsample)
e <- RC_match_plot(data = df, match = nf_match_subsample)
f <- RA_match_plot(data = df, match = nf_match_subsample)
ggarrange(a, b, c, d, e, f, ncol = 3, nrow =2, labels = "AUTO")
pdf("figures/Figure3.pdf",  width=8, height=6)
ggarrange(a, b, c, d, e, f, ncol = 3, nrow =2, labels = "AUTO")
dev.off()
nu <- 0.3
rho <- 0.2
#simulate data
df <- generate_xSITA_data(N = 2000, p = 10, nu = nu, rho = rho, sigma = 1)
k = 1
# mahalanobis match
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = df)
m_match <- pairmatch(mahal_dist, controls = k, df)
#Calculate best possible propensity and prognostic scores without knowing about confounder
naive_df <- df %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = 1/(1+exp(-(X1/3-3))))
naive_prop_match <- pairmatch(t ~ prop, controls = k, naive_df)
mahal_caliper_dist <- addcaliper(mahal_dist, z = naive_df$t, p = naive_df$prop, caliper = 0.1)
mahal_caliper_dist <- addcaliper(mahal_caliper_dist, z = naive_df$t, p = naive_df$prog, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, naive_df)
a <- AC_match_plot(naive_df, m_match, title = "Mahalanobis Match")
b <- AC_match_plot(naive_df, oracle_prop_match, title = "Propensity Match")
c <- AC_match_plot(naive_df, m_caliper_match, title = "Mahalanobis Match, Joint Calipers")
d <- AC_match_plot(df, m_match, title = "Mahalanobis Match")
e <- AC_match_plot(df, oracle_prop_match, title = "Propensity Match")
f <- AC_match_plot(df, m_caliper_match, title = "Mahalanobis Match, Joint Calipers")
ggarrange(a,b,c,d, e, f,  ncol= 3, nrow = 2, labels = "AUTO" )
pdf("figures/Figure4.pdf",  width=8, height=6)
ggarrange(a,b,c,d, e, f,  ncol= 3, nrow = 2, labels = "AUTO" )
dev.off()
devtools::load_all(".")
devtools::use_build_ignore("data")
usethis::use_build_ignore("data")
library(RACplots)
library(RACplots)
