mystrata
mystrata$prognostic_scores
mystrata <- auto_stratify(cabg_cleaned, "SEX_GENDER_MATCH", MORT_30_DAY ~ BENE_MDCR_STUS_CD +
BENE_RACE_CD + BENE_AGE_CNT + IP_ADMSN_TYPE_CD +
cabg_only + cabg_primary + indexSurgyear + hosp_vol_99_10 +
hosp_mvol_99_10 + prior_cabg, pilot_fraction = 0.1)
?join
knitr::opts_chunk$set(echo = TRUE)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
caliper_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(prog_model, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = not_selected)
mahal_caliper_dist <- addcaliper(mahal_dist, z = not_selected$t, p = not_selected$propscore, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, not_selected)
return(list(df = not_selected, match = m_caliper_match, k = n_control))
}
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggarrange)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
caliper_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(prog_model, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = not_selected)
mahal_caliper_dist <- addcaliper(mahal_dist, z = not_selected$t, p = not_selected$propscore, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, not_selected)
return(list(df = not_selected, match = m_caliper_match, k = n_control))
}
# Build scores empirically for propensity and prognostic match
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
# Build scores empirically for propensity and prognostic match
prop_model = formula(t ~ . - mu - y)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
df
# Build scores empirically for propensity and prognostic match
prop_model = formula(t ~ . - y - mu)
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
caliper_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(prog_model, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = not_selected)
mahal_caliper_dist <- addcaliper(mahal_dist, z = not_selected$t, p = not_selected$propscore, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, not_selected)
return(list(df = not_selected, match = m_caliper_match, k = n_control))
}
# Build scores empirically for propensity and prognostic match
prop_model = formula(t ~ . - y - mu)
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# Build scores empirically for propensity and prognostic match
prop_model = formula(t ~ . - y - mu)
k <- 1
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ . - mu - y)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match_assignment <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match_assignment <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
library(DOS2)
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match_assignment <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
match_viz <- function(data, match, rho, k = 1, title = "Matching"){
plt_data <- data %>%
mutate(m = match) %>%
mutate(a = ifelse (is.na(m), 0.9, 1)) %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop, m, a))
m_data <- plt_data %>%
filter(!is.na(m)) %>%
arrange(m, desc(t)) %>%
mutate(id = rep(1:(k + 1), sum(data$t))) %>%
dplyr::select(-c(t, a)) %>%
group_by(m) %>%
summarize(prop1 = first(prop), prop2 = last(prop),
prog1 = first(prog), prog2 = last(prog)) %>%
dplyr::select(prog1, prog2, prop1, prop2)
plt <- ggplot(data = plt_data, aes( x = prop, y = prog, group = t, color = t)) +
geom_point(aes(alpha = a), size = 1)+
scale_color_brewer(palette="Set1") +
geom_segment(data = m_data,
aes(x = prop1, y = prog1,
xend = prop2, yend = prog2),
color =  "black", group = NA, linetype = "dashed") +
ggtitle( title)+
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9))+
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab(expression(paste("Propensity, ", phi, "(x)", sep = "")))
return(plt)
}
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, prop_match, rho, title = "Estimated Propensity Match")
c <- match_viz(buff_match_assignment$df, buff_match_assignment$match, rho, title = "Estimated Propensity x Prognosis Match")
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
library(DOS2)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
library(DOS2)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
knitr::opts_chunk$set(echo = TRUE)
library(RACplots)
library(tidyverse)
library(ggpubr)
library(optmatch)
library(DOS2)
FC_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.9)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab("Forcing Variable")
return(plt)
}
RD_plot <- function(data) {
plt_data <- data %>%
mutate(t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, y, X1))
plt <- ggplot(data = plt_data, aes( x = X1, y = y, group = t, color = t)) +
geom_point(size = 1, aes(alpha = 0.8)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9)) +
ylab("Observed Outcome") +
xlab("Forcing Variable")
return(plt)
}
rho <- 0.9
df <- generate_rd_data(rho = rho, sigma = 0.25)
a <- FC_plot(df)
b <- RD_plot(df)
ggarrange(a, b, ncol = 2, nrow = 1, labels = "AUTO")
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
caliper_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(prog_model, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = not_selected)
mahal_caliper_dist <- addcaliper(mahal_dist, z = not_selected$t, p = not_selected$propscore, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, not_selected)
return(list(df = not_selected, match = m_caliper_match, k = n_control))
}
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
prog_model = formula(y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10)
# mahalanobis match
mahal_dist <- DOS2::smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# build propensity score
propensity <- glm(prop_model, family = binomial(), data = df)
prop_match <- pairmatch(propensity, controls = k, df)
# 1:2 mahalanobis matching to select data to use for prognostic model
mahal_match <- pairmatch(mahal_dist, controls = 2, df)
caliper_match <- caliper_match_assignment(df, propensity, mahal_match, prog_model, k)
match_viz <- function(data, match, rho, k = 1, title = "Matching"){
plt_data <- data %>%
mutate(m = match) %>%
mutate(a = ifelse (is.na(m), 0.9, 1)) %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop, m, a))
m_data <- plt_data %>%
filter(!is.na(m)) %>%
arrange(m, desc(t)) %>%
mutate(id = rep(1:(k + 1), sum(data$t))) %>%
dplyr::select(-c(t, a)) %>%
group_by(m) %>%
summarize(prop1 = first(prop), prop2 = last(prop),
prog1 = first(prog), prog2 = last(prog)) %>%
dplyr::select(prog1, prog2, prop1, prop2)
plt <- ggplot(data = plt_data, aes( x = prop, y = prog, group = t, color = t)) +
geom_point(aes(alpha = a), size = 1)+
scale_color_brewer(palette="Set1") +
geom_segment(data = m_data,
aes(x = prop1, y = prog1,
xend = prop2, yend = prog2),
color =  "black", group = NA, linetype = "dashed") +
ggtitle( title)+
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9))+
ylab(expression(paste("Prognosis, ", Psi, "(x)", sep = ""))) +
xlab(expression(paste("Propensity, ", phi, "(x)", sep = "")))
return(plt)
}
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, prop_match, rho, title = "Estimated Propensity Match")
c <- match_viz(caliper_match$df, caliper_match$match, rho, title = "Estimated Propensity x Prognosis Match")
ggarrange(a,b,c, ncol= 3, labels = "AUTO" )
