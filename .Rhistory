group_by(m) %>%
summarize(prop1 = first(prop), prop2 = last(prop),
prog1 = first(prog), prog2 = last(prog)) %>%
dplyr::select(prog1, prog2, prop1, prop2)
plt <- ggplot(data = plt_data, aes( x = prop, y = prog, group = t, color = t)) +
geom_point(aes(alpha = a), size = 1)+
scale_color_brewer(palette="Set1") +
geom_segment(data = m_data,
aes(x = prop1, y = prog1,
xend = prop2, yend = prog2),
color =  "black", group = NA, linetype = "dashed") +
ggtitle( title)+
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9))+
ylab(expression(paste(Psi, "(x)", sep = ""))) +
xlab(expression(paste(phi, "(x)", sep = "")))
return(plt)
}
overlap_histogram <- function(data){
plt_data <- data %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop))
ggplot(plt_data, aes(x = prop, fill = t)) + geom_histogram(alpha = 0.4, position = "identity")
}
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
prognostic_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(y ~ . - mu - t - row - m, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
prog_dist <- match_on(t ~ progscore + propscore, data = not_selected)
prog_match <- pairmatch(prog_dist, controls = n_control, data = not_selected)
return(list(df = not_selected, match = prog_match, k = n_control))
}
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ . - mu - y)
prog_model = formula(y ~ . - mu - t)
# mahalanobis match
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = df)
m_match <- pairmatch(mahal_dist, controls = k, df)
#Calculate true propensity and prognostic score, and match on the true score
oracle_df <- df %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = 1/(1+exp(-(mu))))
oracle_prop_match <- pairmatch(t ~ prop, controls = k, oracle_df)
oracle_prog_match <- pairmatch(t ~ prog + prop, controls = k, oracle_df)
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, oracle_prop_match, rho, title = "True Propensity Match")
c <- match_viz(df, oracle_prog_match, rho, title = "True Propensity x Prognosis Match")
ggarrange(a,b,c, ncol= 3, labels = "AUTO" )
library(RACplots)
match_viz <- function(data, match, rho, k = 1, title = "Matching"){
plt_data <- data %>%
mutate(m = match) %>%
mutate(a = ifelse (is.na(m), 0.9, 1)) %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop, m, a))
m_data <- plt_data %>%
filter(!is.na(m)) %>%
arrange(m, desc(t)) %>%
mutate(id = rep(1:(k + 1), sum(data$t))) %>%
dplyr::select(-c(t, a)) %>%
group_by(m) %>%
summarize(prop1 = first(prop), prop2 = last(prop),
prog1 = first(prog), prog2 = last(prog)) %>%
dplyr::select(prog1, prog2, prop1, prop2)
plt <- ggplot(data = plt_data, aes( x = prop, y = prog, group = t, color = t)) +
geom_point(aes(alpha = a), size = 1)+
scale_color_brewer(palette="Set1") +
geom_segment(data = m_data,
aes(x = prop1, y = prog1,
xend = prop2, yend = prog2),
color =  "black", group = NA, linetype = "dashed") +
ggtitle( title)+
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9))+
ylab(expression(paste(Psi, "(x)", sep = ""))) +
xlab(expression(paste(phi, "(x)", sep = "")))
return(plt)
}
overlap_histogram <- function(data){
plt_data <- data %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop))
ggplot(plt_data, aes(x = prop, fill = t)) + geom_histogram(alpha = 0.4, position = "identity")
}
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
prognostic_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(y ~ . - mu - t - row - m, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
prog_dist <- match_on(t ~ progscore + propscore, data = not_selected)
prog_match <- pairmatch(prog_dist, controls = n_control, data = not_selected)
return(list(df = not_selected, match = prog_match, k = n_control))
}
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ . - mu - y)
prog_model = formula(y ~ . - mu - t)
# mahalanobis match
mahal_dist <- match_on(prop_model, method = "mahalanobis", data = df)
m_match <- pairmatch(mahal_dist, controls = k, df)
#Calculate true propensity and prognostic score, and match on the true score
oracle_df <- df %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = 1/(1+exp(-(mu))))
oracle_prop_match <- pairmatch(t ~ prop, controls = k, oracle_df)
oracle_prog_match <- pairmatch(t ~ prog + prop, controls = k, oracle_df)
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, oracle_prop_match, rho, title = "True Propensity Match")
c <- match_viz(df, oracle_prog_match, rho, title = "True Propensity x Prognosis Match")
ggarrange(a,b,c, ncol= 3, labels = "AUTO" )
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, oracle_prop_match, rho, title = "True Propensity Match")
ggarrange(a,b, ncol= 3, labels = "AUTO" )
library(optmatch)
?optmatch
?addcaliper
library(RACplots)
library(optmatch)
library(DOS2)
# mahalanobis match + caliper
propscores <- predict(glm(prop_model, data = df, family = "binomial"))
propscores
# mahalanobis match + caliper
propscores <- predict(glm(prop_model, data = df, family = "binomial"), type = "response")
mahal_caliper_dist <- addcaliper(mahal_dist, propscores)
mahal_dist
?addcaliper
df
df[,1:10]
# mahalanobis match
mahal_dist <- smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# mahalanobis match + caliper
propscores <- predict(glm(prop_model, data = df, family = "binomial"), type = "response")
mahal_caliper_dist <- addcaliper(mahal_dist, propscores)
mahal_caliper_dist <- addcaliper(mahal_dist, z = df$t, p = propscores, caliper = 0.1)
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ . - mu - y)
# mahalanobis match
mahal_dist <- smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# mahalanobis match + caliper
propscores <- predict(glm(prop_model, data = df, family = "binomial"), type = "response")
mahal_caliper_dist <- addcaliper(mahal_dist, z = df$t, p = propscores, caliper = 0.1)
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ . - mu - y)
# mahalanobis match
mahal_dist <- smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# mahalanobis match + caliper
propscores <- predict(glm(prop_model, data = df, family = "binomial"), type = "response")
mahal_caliper_dist <- addcaliper(mahal_dist, z = df$t, p = propscores, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, df)
#Calculate true propensity and prognostic score, and match on the true score
oracle_df <- df %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = 1/(1+exp(-(mu))))
oracle_prop_match <- pairmatch(t ~ prop, controls = k, oracle_df)
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, oracle_prop_match, rho, title = "True Propensity Match")
ggarrange(a,b, ncol= 3, labels = "AUTO" )
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, oracle_prop_match, rho, title = "True Propensity Match")
c <- match_viz(df, m_caliper_match, rho, title = "Mahalanobis Match with Propensity Caliper")
ggarrange(a,b, ncol= 3, labels = "AUTO" )
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, oracle_prop_match, rho, title = "True Propensity Match")
c <- match_viz(df, m_caliper_match, rho, title = "Mahalanobis Match with Propensity Caliper")
ggarrange(a,b, c, ncol= 3, labels = "AUTO" )
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, oracle_prop_match, rho, title = "True Propensity Match")
c <- match_viz(df, m_caliper_match, rho, title = "Mahalanobis Match with Propensity Caliper")
ggarrange(a,b, c, ncol= 3, labels = "AUTO" )
df$mu
logit(df$mu)
glm(prop_model, data = df, family = "binomial")
glm(prop_model, data = df, family = "binomial")$inv_link
list(glm(prop_model, data = df, family = "binomial"))
unlist(glm(prop_model, data = df, family = "binomial"))
unlist(glm(prop_model, data = df, family = "binomial"))[1:10]
unlist(glm(prop_model, data = df, family = "binomial"))[1:120]
# mahalanobis match + caliper
# todo: make this the true propensity score.
propscores <- predict(glm(prop_model, data = df, family = binomial()), type = "response")
glm(prop_model, data = df, family = binomial())
# mahalanobis match + caliper
# todo: make this the true propensity score.
propscores <- 1/(1 + exp(-df$mu))
propscores
rho <- 0.5
#simulate data
df <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ . - mu - y)
# mahalanobis match
mahal_dist <- smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# mahalanobis match + caliper
# todo: make this the true propensity score.
propscores <- 1/(1 + exp(-df$mu))
mahal_caliper_dist <- addcaliper(mahal_dist, z = df$t, p = propscores, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, df)
#Calculate true propensity and prognostic score, and match on the true score
oracle_df <- df %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = 1/(1+exp(-(mu))))
oracle_prop_match <- pairmatch(t ~ prop, controls = k, oracle_df)
a <- match_viz(df, m_match, rho, title = "Mahalanobis Match")
b <- match_viz(df, oracle_prop_match, rho, title = "True Propensity Match")
c <- match_viz(df, m_caliper_match, rho, title = "Mahalanobis Match with Propensity Caliper")
ggarrange(a,b, c, ncol= 3, labels = "AUTO" )
match_viz <- function(data, match, rho, k = 1, title = "Matching"){
plt_data <- data %>%
mutate(m = match) %>%
mutate(a = ifelse (is.na(m), 0.9, 1)) %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop, m, a))
m_data <- plt_data %>%
filter(!is.na(m)) %>%
arrange(m, desc(t)) %>%
mutate(id = rep(1:(k + 1), sum(data$t))) %>%
dplyr::select(-c(t, a)) %>%
group_by(m) %>%
summarize(prop1 = first(prop), prop2 = last(prop),
prog1 = first(prog), prog2 = last(prog)) %>%
dplyr::select(prog1, prog2, prop1, prop2)
plt <- ggplot(data = plt_data, aes( x = prop, y = prog, group = t, color = t)) +
geom_point(aes(alpha = a), size = 1)+
scale_color_brewer(palette="Set1") +
geom_segment(data = m_data,
aes(x = prop1, y = prog1,
xend = prop2, yend = prog2),
color =  "black", group = NA, linetype = "dashed") +
ggtitle( title)+
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9))+
ylab(expression(paste(Psi, "(x)", sep = ""))) +
xlab(expression(paste(phi, "(x)", sep = "")))
return(plt)
}
overlap_histogram <- function(data){
plt_data <- data %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop))
ggplot(plt_data, aes(x = prop, fill = t)) + geom_histogram(alpha = 0.4, position = "identity")
}
# like prognostic match except returns data frame and match assignments, not just the
# reformatted dataframe of outcomes by match assignment
prognostic_match_assignment <- function(df, propensity, match_assignment, prog_model, n_control) {
df$m <- match_assignment
df$row <- 1:nrow(df)
n_t<- sum(df$t)
selected <- df %>%
filter(!is.na(m)) %>%
filter(t==0) %>%
group_by(m) %>%
sample_n(size = 1)
prognostic <- lm(y ~ . - mu - t - row - m, data = selected)
not_selected <- df[-selected$row, ]
not_selected <- not_selected %>%
mutate(progscore = predict(prognostic, not_selected)) %>%
mutate(propscore = predict(propensity, not_selected))
prog_dist <- match_on(t ~ progscore + propscore, data = not_selected)
prog_match <- pairmatch(prog_dist, controls = n_control, data = not_selected)
return(list(df = not_selected, match = prog_match, k = n_control))
}
library(RACplots)
?generate_data
library(RACplots)
library(RACplots)
?generate_data
library(RACplots)
library(RACplots)
library(RACplots)
library(RACplots)
library(RACplots)
knitr::opts_chunk$set(cache=TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align = "center", fig.height = 4)
library(RACplots)
library(optmatch)
library(DOS2)
library(dplyr)
library(ggplot2)
library(ggpubr)
match_viz <- function(data, match, rho, k = 1, title = "Matching"){
plt_data <- data %>%
mutate(m = match) %>%
mutate(a = ifelse (is.na(m), 0.9, 1)) %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop, m, a))
m_data <- plt_data %>%
filter(!is.na(m)) %>%
arrange(m, desc(t)) %>%
mutate(id = rep(1:(k + 1), sum(data$t))) %>%
dplyr::select(-c(t, a)) %>%
group_by(m) %>%
summarize(prop1 = first(prop), prop2 = last(prop),
prog1 = first(prog), prog2 = last(prog)) %>%
dplyr::select(prog1, prog2, prop1, prop2)
plt <- ggplot(data = plt_data, aes( x = prop, y = prog, group = t, color = t)) +
geom_point(aes(alpha = a), size = 1)+
scale_color_brewer(palette="Set1") +
geom_segment(data = m_data,
aes(x = prop1, y = prog1,
xend = prop2, yend = prog2),
color =  "black", group = NA, linetype = "dashed") +
ggtitle( title)+
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 9))+
ylab(expression(paste(Psi, "(x)", sep = ""))) +
xlab(expression(paste(phi, "(x)", sep = "")))
return(plt)
}
overlap_histogram <- function(data){
plt_data <- data %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t))) %>%
dplyr::select(c(t, prog, prop))
ggplot(plt_data, aes(x = prop, fill = t)) + geom_histogram(alpha = 0.4, position = "identity")
}
AC_plot <- function(data, rho, title = ""){
plt_data <- data %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = mu,
t = as.factor(abs(1-t)),
a = ifelse(t == 1, 0.9, 1)) %>%
dplyr::select(c(t, prog, prop, a))
plt <- ggplot(data = plt_data, aes( x = prop, y = prog, group = t, color = t)) +
geom_point(size = 1, aes(alpha = a)) +
scale_color_brewer(palette="Set1") +
theme(legend.position = "none", aspect.ratio=1, plot.title = element_text(hjust = 0.5, size = 12))+
ggtitle(title) +
ylab(expression(paste("Prognostic Score, ", Psi, "(x)", sep = ""))) +
xlab("Propensity Score, logit(e(x))")
return(plt)
}
rho <- 0.5
#simulate data
df <- RACplots::generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
k = 1
prop_model = formula(t ~ . - mu - y)
# mahalanobis match
mahal_dist <- smahal(df$t, df[,1:10])
m_match <- pairmatch(mahal_dist, controls = k, df)
# mahalanobis match + caliper
# todo: make this the true propensity score.
propscores <- 1/(1 + exp(-df$mu))
mahal_caliper_dist <- addcaliper(mahal_dist, z = df$t, p = propscores, caliper = 0.1)
m_caliper_match <- pairmatch(mahal_caliper_dist, controls = k, df)
#Calculate true propensity and prognostic score, and match on the true score
oracle_df <- df %>%
mutate(prog = rho*X1 + sqrt(1-rho^2)*X2,
prop = 1/(1+exp(-(mu))))
oracle_prop_match <- pairmatch(t ~ prop, controls = k, oracle_df)
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df, rho)
b <- AC_plot(data = df, rho)
c <- AC_plot(df, rho)
ggarrange(a,b, c, ncol= 3, labels = "AUTO" )
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3, labels = "AUTO" )
a
knitr::opts_chunk$set(cache=TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align = "center", fig.height = 4)
library(RACplots)
library(optmatch)
library(DOS2)
library(dplyr)
library(ggplot2)
library(ggpubr)
theme_set(theme_light())
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3, labels = "AUTO" )
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3)
knitr::opts_chunk$set(cache=TRUE, warning = FALSE, message = FALSE, echo = FALSE, fig.align = "center")
library(RACplots)
library(optmatch)
library(DOS2)
library(dplyr)
library(ggplot2)
library(ggpubr)
theme_set(theme_light())
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3)
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1-3", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3)
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "2*X1-3", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3, labels = "AUTO")
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "2*X1-5", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3, labels = "AUTO")
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "2*X1-4", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3, labels = "AUTO")
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "2*X1-4.5", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 2000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3, labels = "AUTO")
rho <- 0.5
#simulate data
df_normal <- generate_data(N = 1000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
df_prop_overlap_bad <- generate_data(N = 1000, p = 10, true_mu = "2*X1-4.5", rho = rho, sigma = 1)
df_prog_overlap_bad <- generate_data(N = 1000, p = 10, true_mu = "X1/3-3", rho = rho, sigma = 1)
a <- AC_plot(data = df_normal, rho)
b <- AC_plot(data = df_prop_overlap_bad, rho)
c <- AC_plot(data = df_prog_overlap_bad, rho)
ggarrange(a,b, c, ncol= 3, labels = "AUTO")
